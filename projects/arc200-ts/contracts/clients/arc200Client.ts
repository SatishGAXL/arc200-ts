/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(string,string,uint8)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc200_name()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_symbol()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_decimals()uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_balanceOf(address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transfer(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transferFrom(address,address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_approve(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_allowance(address,address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_mint(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_burn(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "name": {
          "type": "bytes",
          "key": "name"
        },
        "symbol": {
          "type": "bytes",
          "key": "symbol"
        },
        "decimals": {
          "type": "bytes",
          "key": "decimals"
        },
        "totalSupply": {
          "type": "bytes",
          "key": "totalSupply"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjk4LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyxzdHJpbmcsdWludDgpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZGVjaW1hbHM6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDEKCT09CgoJLy8gYXJndW1lbnQgMCAoZGVjaW1hbHMpIGZvciBjcmVhdGVBcHBsaWNhdGlvbiBtdXN0IGJlIGEgdWludDgKCWFzc2VydAoJYnRvaQoKCS8vIHN5bWJvbDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIG5hbWU6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyxzdHJpbmcsdWludDgpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24obmFtZTogYnl0ZXNbMzJdLCBzeW1ib2w6IGJ5dGVzWzhdLCBkZWNpbWFsczogdWludDgpOiB2b2lkCi8vCi8vIENvbnRydWN0b3Igd2hpY2ggaW5pdGlhbGl6ZXMgbmFtZSwgc3ltYm9sLCBkZWNpbWFscyBhbmQgdG90YWxTdXBwbHkgb2YgdGhlIHRva2VuCi8vCi8vIEBwYXJhbSBuYW1lCi8vIEBwYXJhbSBzeW1ib2wKLy8gQHBhcmFtIGRlY2ltYWxzCi8vIEByZXR1cm5zIHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MzIKCS8vIHRoaXMubmFtZS52YWx1ZSA9IG5hbWUKCWJ5dGUgMHg2ZTYxNmQ2NSAvLyAibmFtZSIKCWZyYW1lX2RpZyAtMSAvLyBuYW1lOiBieXRlc1szMl0KCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czozMwoJLy8gdGhpcy5zeW1ib2wudmFsdWUgPSBzeW1ib2wKCWJ5dGUgMHg3Mzc5NmQ2MjZmNmMgLy8gInN5bWJvbCIKCWZyYW1lX2RpZyAtMiAvLyBzeW1ib2w6IGJ5dGVzWzhdCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MzQKCS8vIHRoaXMuZGVjaW1hbHMudmFsdWUgPSBkZWNpbWFscwoJYnl0ZSAweDY0NjU2MzY5NmQ2MTZjNzMgLy8gImRlY2ltYWxzIgoJZnJhbWVfZGlnIC0zIC8vIGRlY2ltYWxzOiB1aW50OAoJaXRvYgoJZXh0cmFjdCA3IDEKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjM1CgkvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gMCBhcyB1aW50MjU2CglieXRlIDB4NzQ2Zjc0NjE2YzUzNzU3MDcwNmM3OSAvLyAidG90YWxTdXBwbHkiCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYXJjMjAwX25hbWUoKXN0cmluZwoqYWJpX3JvdXRlX2FyYzIwMF9uYW1lOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF9uYW1lKClzdHJpbmcKCWNhbGxzdWIgYXJjMjAwX25hbWUKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjMjAwX25hbWUoKTogYnl0ZXNbMzJdCi8vCi8vIFJldHVybnMgdGhlIHN5bWJvbCBvZiB0aGUgdG9rZW4KLy8KLy8gQHJldHVybnMgc3ltYm9sIG9mIHRoZSB0b2tlbgphcmMyMDBfbmFtZToKCXByb3RvIDAgMQoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czo0NAoJLy8gcmV0dXJuIHRoaXMubmFtZS52YWx1ZTsKCWJ5dGUgMHg2ZTYxNmQ2NSAvLyAibmFtZSIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJcmV0c3ViCgovLyBhcmMyMDBfc3ltYm9sKClzdHJpbmcKKmFiaV9yb3V0ZV9hcmMyMDBfc3ltYm9sOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF9zeW1ib2woKXN0cmluZwoJY2FsbHN1YiBhcmMyMDBfc3ltYm9sCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9zeW1ib2woKTogYnl0ZXNbOF0KLy8KLy8gUmV0dXJucyB0aGUgZGVjaW1hbHMgb2YgdGhlIHRva2VuCi8vCi8vIEByZXR1cm5zIGRlY2ltYWxzIG9mIHRoZSB0b2tlbgphcmMyMDBfc3ltYm9sOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjUzCgkvLyByZXR1cm4gdGhpcy5zeW1ib2wudmFsdWU7CglieXRlIDB4NzM3OTZkNjI2ZjZjIC8vICJzeW1ib2wiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCXJldHN1YgoKLy8gYXJjMjAwX2RlY2ltYWxzKCl1aW50OAoqYWJpX3JvdXRlX2FyYzIwMF9kZWNpbWFsczoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBhcmMyMDBfZGVjaW1hbHMoKXVpbnQ4CgljYWxsc3ViIGFyYzIwMF9kZWNpbWFscwoJaXRvYgoJZHVwCgliaXRsZW4KCWludCA4Cgk8PQoKCS8vIGFyYzIwMF9kZWNpbWFscyByZXR1cm4gdmFsdWUgb3ZlcmZsb3dlZCA4IGJpdHMKCWFzc2VydAoJZXh0cmFjdCA3IDEKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfZGVjaW1hbHMoKTogdWludDgKLy8KLy8gUmV0dXJucyB0aGUgZGVjaW1hbHMgb2YgdGhlIHRva2VuCi8vCi8vIEByZXR1cm5zIGRlY2ltYWxzIG9mIHRoZSB0b2tlbgphcmMyMDBfZGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6NjIKCS8vIHJldHVybiB0aGlzLmRlY2ltYWxzLnZhbHVlOwoJYnl0ZSAweDY0NjU2MzY5NmQ2MTZjNzMgLy8gImRlY2ltYWxzIgoJYXBwX2dsb2JhbF9nZXQKCWJ0b2kKCXJldHN1YgoKLy8gYXJjMjAwX3RvdGFsU3VwcGx5KCl1aW50MjU2CiphYmlfcm91dGVfYXJjMjAwX3RvdGFsU3VwcGx5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF90b3RhbFN1cHBseSgpdWludDI1NgoJY2FsbHN1YiBhcmMyMDBfdG90YWxTdXBwbHkKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoKCS8vIGFyYzIwMF90b3RhbFN1cHBseSByZXR1cm4gdmFsdWUgb3ZlcmZsb3dlZCAyNTYgYml0cwoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF90b3RhbFN1cHBseSgpOiB1aW50MjU2Ci8vCi8vIFJldHVybnMgdGhlIHRvdGFsIHN1cHBseSBvZiB0aGUgdG9rZW4KLy8KLy8gQHJldHVybnMgdG90YWwgc3VwcGx5IG9mIHRoZSB0b2tlbgphcmMyMDBfdG90YWxTdXBwbHk6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6NzEKCS8vIHJldHVybiB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlOwoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCXJldHN1YgoKLy8gYXJjMjAwX2JhbGFuY2VPZihhZGRyZXNzKXVpbnQyNTYKKmFiaV9yb3V0ZV9hcmMyMDBfYmFsYW5jZU9mOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChvd25lcikgZm9yIGFyYzIwMF9iYWxhbmNlT2YgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXJjMjAwX2JhbGFuY2VPZihhZGRyZXNzKXVpbnQyNTYKCWNhbGxzdWIgYXJjMjAwX2JhbGFuY2VPZgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9CgoJLy8gYXJjMjAwX2JhbGFuY2VPZiByZXR1cm4gdmFsdWUgb3ZlcmZsb3dlZCAyNTYgYml0cwoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9iYWxhbmNlT2Yob3duZXI6IEFkZHJlc3MpOiB1aW50MjU2Ci8vCi8vIFJldHVybnMgdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2VuCi8vCi8vIEBwYXJhbSBvd25lcgovLyBAcmV0dXJucyBjdXJyZW50IGJhbGFuY2Ugb2YgdGhlIG93bmVyIG9mIHRoZSB0b2tlbgphcmMyMDBfYmFsYW5jZU9mOgoJcHJvdG8gMSAxCgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czo4MQoJLy8gdGhpcy51c2Vycyhvd25lcikuZXhpc3RzCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6ODIKCS8vIHJldHVybiB0aGlzLnVzZXJzKG93bmVyKS52YWx1ZS5iYWxhbmNlOwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnVzZXJzKG93bmVyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDMyCglyZXRzdWIKCWIgKmlmMF9lbmQKCippZjBfZWxzZToKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czo4NAoJLy8gcmV0dXJuIDAgYXMgdWludDI1NjsKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCglyZXRzdWIKCippZjBfZW5kOgoJcmV0c3ViCgovLyBhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wKKmFiaV9yb3V0ZV9hcmMyMDBfdHJhbnNmZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHZhbHVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHZhbHVlKSBmb3IgYXJjMjAwX3RyYW5zZmVyIG11c3QgYmUgYSB1aW50MjU2Cglhc3NlcnQKCgkvLyB0bzogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAxICh0bykgZm9yIGFyYzIwMF90cmFuc2ZlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF90cmFuc2Zlcih0bzogQWRkcmVzcywgdmFsdWU6IHVpbnQyNTYpOiBib29sZWFuCi8vCi8vIFRyYW5zZmVycyB0b2tlbnMKLy8KLy8gQHBhcmFtIHRvIC0gVGhlIGRlc3RpbmF0aW9uIG9mIHRoZSB0cmFuc2ZlcgovLyBAcGFyYW0gdmFsdWUgLSBBbW91bnQgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCi8vIEByZXR1cm5zIFN0YXR1cyB3aGV0aGVyIHRyYW5zZmVyIGlzIHN1Y2Nlc3Mgb3Igbm90CmFyYzIwMF90cmFuc2ZlcjoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjk2CgkvLyBzZW5kZXIgPSB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWZyYW1lX2J1cnkgMCAvLyBzZW5kZXI6IGFkZHJlc3MKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6OTcKCS8vIGFzc2VydCh0aGlzLnVzZXJFeGlzdHMoc2VuZGVyKSwgJ05vIEJhbGFuY2UgQXZhaWxhYmxlIGluIFNlbmRlciBBY2NvdW50JykKCWZyYW1lX2RpZyAwIC8vIHNlbmRlcjogYWRkcmVzcwoJY2FsbHN1YiB1c2VyRXhpc3RzCgoJLy8gTm8gQmFsYW5jZSBBdmFpbGFibGUgaW4gU2VuZGVyIEFjY291bnQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czo5OAoJLy8gYXNzZXJ0KHRoaXMuZW5zdXJlQmFsYW5jZShzZW5kZXIsIHZhbHVlKSwgJ0luc3VmZmljaWVudCBCYWxhbmNlIGluIFNlbmRlciBBY2NvdW50JykKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogdWludDI1NgoJZnJhbWVfZGlnIDAgLy8gc2VuZGVyOiBhZGRyZXNzCgljYWxsc3ViIGVuc3VyZUJhbGFuY2UKCgkvLyBJbnN1ZmZpY2llbnQgQmFsYW5jZSBpbiBTZW5kZXIgQWNjb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjk5CgkvLyBhc3NlcnQodG8gIT0gZ2xvYmFscy56ZXJvQWRkcmVzcywgJ1NlbmRpbmcgdG8gWmVybyBBZGRyZXNzIGlzIG5vdCBBbGxvd2VkJykKCWZyYW1lX2RpZyAtMSAvLyB0bzogQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoKCS8vIFNlbmRpbmcgdG8gWmVybyBBZGRyZXNzIGlzIG5vdCBBbGxvd2VkCglhc3NlcnQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTAwCgkvLyB0aGlzLl90cmFuc2ZlcihzZW5kZXIsIHRvLCB2YWx1ZSkKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogdWludDI1NgoJZnJhbWVfZGlnIC0xIC8vIHRvOiBBZGRyZXNzCglmcmFtZV9kaWcgMCAvLyBzZW5kZXI6IGFkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjEwMQoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wKKmFiaV9yb3V0ZV9hcmMyMDBfdHJhbnNmZXJGcm9tOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyB2YWx1ZTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh2YWx1ZSkgZm9yIGFyYzIwMF90cmFuc2ZlckZyb20gbXVzdCBiZSBhIHVpbnQyNTYKCWFzc2VydAoKCS8vIHRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKHRvKSBmb3IgYXJjMjAwX3RyYW5zZmVyRnJvbSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZnJvbTogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAyIChmcm9tKSBmb3IgYXJjMjAwX3RyYW5zZmVyRnJvbSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyRnJvbQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfdHJhbnNmZXJGcm9tKGZyb206IEFkZHJlc3MsIHRvOiBBZGRyZXNzLCB2YWx1ZTogdWludDI1Nik6IGJvb2xlYW4KLy8KLy8gVHJhbnNmZXJzIHRva2VucyBmcm9tIHNvdXJjZSB0byBkZXN0aW5hdGlvbiBhcyBhcHByb3ZlZCBzcGVuZGVyVHJhbnNmZXJzIHRva2VucyBmcm9tIHNvdXJjZSB0byBkZXN0aW5hdGlvbiBhcyBhcHByb3ZlZCBzcGVuZGVyCi8vCi8vIEBwYXJhbSBmcm9tIC0gVGhlIHNvdXJjZSAgb2YgdGhlIHRyYW5zZmVyCi8vIEBwYXJhbSB0byAtIFRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgdHJhbnNmZXIKLy8gQHBhcmFtIHZhbHVlIC0gQW1vdW50IG9mIHRva2VucyB0byB0cmFuc2ZlcgovLyBAcmV0dXJucyBTdGF0dXMgd2hldGhlciB0cmFuc2ZlciBpcyBzdWNjZXNzIG9yIG5vdAphcmMyMDBfdHJhbnNmZXJGcm9tOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMTMKCS8vIHNwZW5kZXIgPSB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWZyYW1lX2J1cnkgMCAvLyBzcGVuZGVyOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjExNAoJLy8gYXNzZXJ0KHRoaXMudXNlckV4aXN0cyhmcm9tKSwgJ05vIEJhbGFuY2UgQXZhaWxhYmxlIGluIFNlbmRlciBBY2NvdW50JykKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIHVzZXJFeGlzdHMKCgkvLyBObyBCYWxhbmNlIEF2YWlsYWJsZSBpbiBTZW5kZXIgQWNjb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjExNQoJLy8gYXNzZXJ0KHRoaXMuZW5zdXJlQmFsYW5jZShmcm9tLCB2YWx1ZSksICdJbnN1ZmZpY2llbnQgQmFsYW5jZSBpbiBTZW5kZXIgQWNjb3VudCcpCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIGVuc3VyZUJhbGFuY2UKCgkvLyBJbnN1ZmZpY2llbnQgQmFsYW5jZSBpbiBTZW5kZXIgQWNjb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjExNgoJLy8gYXNzZXJ0KHRvICE9IGdsb2JhbHMuemVyb0FkZHJlc3MsICdTZW5kaW5nIHRvIFplcm8gQWRkcmVzcyBpcyBub3QgQWxsb3dlZCcpCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBTZW5kaW5nIHRvIFplcm8gQWRkcmVzcyBpcyBub3QgQWxsb3dlZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjExNwoJLy8gY2hlY2sgPSB0aGlzLmNoZWNrQWxsb3dhbmNlQXZhaWxhYmxlKGZyb20sIHNwZW5kZXIpCglmcmFtZV9kaWcgMCAvLyBzcGVuZGVyOiBhZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJY2FsbHN1YiBjaGVja0FsbG93YW5jZUF2YWlsYWJsZQoJZnJhbWVfYnVyeSAxIC8vIGNoZWNrOiAoYm9vbCx1aW50NjQpCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjExOAoJLy8gYXNzZXJ0KGNoZWNrWzBdLCAnQWxsb3dhbmNlIE5vdCBBdmFpbGFibGUnKQoJZnJhbWVfZGlnIDEgLy8gY2hlY2s6IChib29sLHVpbnQ2NCkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMAoJZ2V0Yml0CgoJLy8gQWxsb3dhbmNlIE5vdCBBdmFpbGFibGUKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMTkKCS8vIGFsbG93YW5jZSA9IHRoaXMuZ2V0QWxsb3dhbmNlKGZyb20sIGNoZWNrWzFdKQoJZnJhbWVfZGlnIDEgLy8gY2hlY2s6IChib29sLHVpbnQ2NCkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDEgOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCWNhbGxzdWIgZ2V0QWxsb3dhbmNlCglmcmFtZV9idXJ5IDIgLy8gYWxsb3dhbmNlOiAoYWRkcmVzcyx1aW50MjU2KQoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMjAKCS8vIGFzc2VydChhbGxvd2FuY2UuYW1vdW50ID49IHZhbHVlLCAnQW1vdW50IGlzIGxlc3MgdGhhbiBiYWxhbmNlIGluIEFsbG93YW5jZScpCglmcmFtZV9kaWcgMiAvLyBhbGxvd2FuY2U6IChhZGRyZXNzLHVpbnQyNTYpCglleHRyYWN0IDMyIDMyCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWI+PQoKCS8vIEFtb3VudCBpcyBsZXNzIHRoYW4gYmFsYW5jZSBpbiBBbGxvd2FuY2UKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMjEKCS8vIHRoaXMuX3RyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSkKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJY2FsbHN1YiBfdHJhbnNmZXIKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTIyCgkvLyB0aGlzLnVwZGF0ZUFsbG93YW5jZShmcm9tLCBhbGxvd2FuY2UuYW1vdW50IC0gdmFsdWUsIGNoZWNrWzFdKQoJZnJhbWVfZGlnIDEgLy8gY2hlY2s6IChib29sLHVpbnQ2NCkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDEgOAoJYnRvaQoJZnJhbWVfZGlnIDIgLy8gYWxsb3dhbmNlOiAoYWRkcmVzcyx1aW50MjU2KQoJZXh0cmFjdCAzMiAzMgoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2CgliLQoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9CgoJLy8gYWxsb3dhbmNlLmFtb3VudCAtIHZhbHVlIG92ZXJmbG93ZWQgMjU2IGJpdHMKCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIHVwZGF0ZUFsbG93YW5jZQoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMjMKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIGFyYzIwMF9hcHByb3ZlKGFkZHJlc3MsdWludDI1Nilib29sCiphYmlfcm91dGVfYXJjMjAwX2FwcHJvdmU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHZhbHVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHZhbHVlKSBmb3IgYXJjMjAwX2FwcHJvdmUgbXVzdCBiZSBhIHVpbnQyNTYKCWFzc2VydAoKCS8vIHNwZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoc3BlbmRlcikgZm9yIGFyYzIwMF9hcHByb3ZlIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzIwMF9hcHByb3ZlKGFkZHJlc3MsdWludDI1Nilib29sCgljYWxsc3ViIGFyYzIwMF9hcHByb3ZlCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9hcHByb3ZlKHNwZW5kZXI6IEFkZHJlc3MsIHZhbHVlOiB1aW50MjU2KTogYm9vbGVhbgphcmMyMDBfYXBwcm92ZToKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjEyNwoJLy8gYXNzZXJ0KHNwZW5kZXIgIT0gZ2xvYmFscy56ZXJvQWRkcmVzcywgJ0Nhbm5vdCBHaXZlIEFMbG93YW5jZSB0byBaZXJvIEFkZHJlc3MnKQoJZnJhbWVfZGlnIC0xIC8vIHNwZW5kZXI6IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBDYW5ub3QgR2l2ZSBBTGxvd2FuY2UgdG8gWmVybyBBZGRyZXNzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTI4CgkvLyBjaGVjayA9IHRoaXMuY2hlY2tBbGxvd2FuY2VBdmFpbGFibGUodGhpcy50eG4uc2VuZGVyLCBzcGVuZGVyKQoJZnJhbWVfZGlnIC0xIC8vIHNwZW5kZXI6IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgY2hlY2tBbGxvd2FuY2VBdmFpbGFibGUKCWZyYW1lX2J1cnkgMCAvLyBjaGVjazogKGJvb2wsdWludDY0KQoKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTI5CgkvLyBjaGVja1swXQoJZnJhbWVfZGlnIDAgLy8gY2hlY2s6IChib29sLHVpbnQ2NCkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMAoJZ2V0Yml0CglieiAqaWYxX2Vsc2UKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMzAKCS8vIHRoaXMudXBkYXRlQWxsb3dhbmNlKHRoaXMudHhuLnNlbmRlciwgdmFsdWUsIGNoZWNrWzFdKQoJZnJhbWVfZGlnIDAgLy8gY2hlY2s6IChib29sLHVpbnQ2NCkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDEgOAoJYnRvaQoJZnJhbWVfZGlnIC0yIC8vIHZhbHVlOiB1aW50MjU2Cgl0eG4gU2VuZGVyCgljYWxsc3ViIHVwZGF0ZUFsbG93YW5jZQoJYiAqaWYxX2VuZAoKKmlmMV9lbHNlOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjEzMgoJLy8gdGhpcy5hZGRBbGxvd2FuY2UodGhpcy50eG4uc2VuZGVyLCBzcGVuZGVyLCB2YWx1ZSkKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogdWludDI1NgoJZnJhbWVfZGlnIC0xIC8vIHNwZW5kZXI6IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgYWRkQWxsb3dhbmNlCgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMzQKCS8vIHRoaXMuYXJjMjAwX0FwcHJvdmFsLmxvZyh7IG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsIHNwZW5kZXI6IHNwZW5kZXIsIHZhbHVlOiB2YWx1ZSB9KQoJYnl0ZSAweDE5NjlmODY1IC8vIGFyYzIwMF9BcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NikKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMzUKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gYXJjMjAwX2FsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpdWludDI1NgoqYWJpX3JvdXRlX2FyYzIwMF9hbGxvd2FuY2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHNwZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoc3BlbmRlcikgZm9yIGFyYzIwMF9hbGxvd2FuY2UgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIG93bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKG93bmVyKSBmb3IgYXJjMjAwX2FsbG93YW5jZSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2CgljYWxsc3ViIGFyYzIwMF9hbGxvd2FuY2UKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoKCS8vIGFyYzIwMF9hbGxvd2FuY2UgcmV0dXJuIHZhbHVlIG92ZXJmbG93ZWQgMjU2IGJpdHMKCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfYWxsb3dhbmNlKG93bmVyOiBBZGRyZXNzLCBzcGVuZGVyOiBBZGRyZXNzKTogdWludDI1NgphcmMyMDBfYWxsb3dhbmNlOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxMzkKCS8vIGNoZWNrID0gdGhpcy5jaGVja0FsbG93YW5jZUF2YWlsYWJsZSh0aGlzLnR4bi5zZW5kZXIsIHNwZW5kZXIpCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiBjaGVja0FsbG93YW5jZUF2YWlsYWJsZQoJZnJhbWVfYnVyeSAwIC8vIGNoZWNrOiAoYm9vbCx1aW50NjQpCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE0MAoJLy8gYXNzZXJ0KGNoZWNrWzBdLCAnQWxsb3dhbmNlIE5vdCBBdmFpbGFibGUnKQoJZnJhbWVfZGlnIDAgLy8gY2hlY2s6IChib29sLHVpbnQ2NCkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMAoJZ2V0Yml0CgoJLy8gQWxsb3dhbmNlIE5vdCBBdmFpbGFibGUKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxNDIKCS8vIGFsbG93YW5jZSA9IHRoaXMuZ2V0QWxsb3dhbmNlKG93bmVyLCBjaGVja1sxXSkKCWZyYW1lX2RpZyAwIC8vIGNoZWNrOiAoYm9vbCx1aW50NjQpCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAxIDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJY2FsbHN1YiBnZXRBbGxvd2FuY2UKCWZyYW1lX2J1cnkgMSAvLyBhbGxvd2FuY2U6IChhZGRyZXNzLHVpbnQyNTYpCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE0MwoJLy8gcmV0dXJuIGFsbG93YW5jZS5hbW91bnQ7CglmcmFtZV9kaWcgMSAvLyBhbGxvd2FuY2U6IChhZGRyZXNzLHVpbnQyNTYpCglleHRyYWN0IDMyIDMyCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgovLyBhcmMyMDBfbWludChhZGRyZXNzLHVpbnQyNTYpYm9vbAoqYWJpX3JvdXRlX2FyYzIwMF9taW50OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyB2YWx1ZTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh2YWx1ZSkgZm9yIGFyYzIwMF9taW50IG11c3QgYmUgYSB1aW50MjU2Cglhc3NlcnQKCgkvLyBhY2NvdW50OiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGFjY291bnQpIGZvciBhcmMyMDBfbWludCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfbWludChhZGRyZXNzLHVpbnQyNTYpYm9vbAoJY2FsbHN1YiBhcmMyMDBfbWludAoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfbWludChhY2NvdW50OiBBZGRyZXNzLCB2YWx1ZTogdWludDI1Nik6IGJvb2xlYW4KYXJjMjAwX21pbnQ6Cglwcm90byAyIDEKCgkvLyAqaWYyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE0NwoJLy8gIXRoaXMudXNlcnMoZ2xvYmFscy56ZXJvQWRkcmVzcykuZXhpc3RzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoJYnogKmlmMl9lbmQKCgkvLyAqaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxNDgKCS8vIHRoaXMudXNlcnMoZ2xvYmFscy56ZXJvQWRkcmVzcykudmFsdWUgPSB7IGJhbGFuY2U6IDAgYXMgdWludDI1NiwgYWxsb3dhbmNlczogW10gfQoJZ2xvYmFsIFplcm9BZGRyZXNzCglkdXAKCWJveF9kZWwKCXBvcAoJYnl0ZSAweCAvLyBpbml0aWFsIGhlYWQKCWJ5dGUgMHggLy8gaW5pdGlhbCB0YWlsCglieXRlIDB4MDAyMiAvLyBpbml0aWFsIGhlYWQgb2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJY2FsbHN1YiAqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJYnl0ZSAweDAwMDAKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWJveF9wdXQKCippZjJfZW5kOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE1MAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PSB0aGlzLmFwcC5jcmVhdG9yLCAnT25seSBBZG1pbiBDYW4gTWludCcpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09CgoJLy8gT25seSBBZG1pbiBDYW4gTWludAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE1MQoJLy8gYXNzZXJ0KGFjY291bnQgIT0gZ2xvYmFscy56ZXJvQWRkcmVzcywgJ0Nhbm5vdCBNaW50IHRvIFplcm8gQWRkcmVzcycpCglmcmFtZV9kaWcgLTEgLy8gYWNjb3VudDogQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoKCS8vIENhbm5vdCBNaW50IHRvIFplcm8gQWRkcmVzcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE1MgoJLy8gdGhpcy5fdHJhbnNmZXIoZ2xvYmFscy56ZXJvQWRkcmVzcywgYWNjb3VudCwgdmFsdWUpCglmcmFtZV9kaWcgLTIgLy8gdmFsdWU6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMSAvLyBhY2NvdW50OiBBZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE1MwoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyBhcmMyMDBfYnVybihhZGRyZXNzLHVpbnQyNTYpYm9vbAoqYWJpX3JvdXRlX2FyYzIwMF9idXJuOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyB2YWx1ZTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh2YWx1ZSkgZm9yIGFyYzIwMF9idXJuIG11c3QgYmUgYSB1aW50MjU2Cglhc3NlcnQKCgkvLyBhY2NvdW50OiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGFjY291bnQpIGZvciBhcmMyMDBfYnVybiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfYnVybihhZGRyZXNzLHVpbnQyNTYpYm9vbAoJY2FsbHN1YiBhcmMyMDBfYnVybgoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfYnVybihhY2NvdW50OiBBZGRyZXNzLCB2YWx1ZTogdWludDI1Nik6IGJvb2xlYW4KYXJjMjAwX2J1cm46Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTU3CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09IHRoaXMuYXBwLmNyZWF0b3IsICdPbmx5IEFkbWluIENhbiBCdXJuJykKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCgkvLyBPbmx5IEFkbWluIENhbiBCdXJuCglhc3NlcnQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTU4CgkvLyBhc3NlcnQoYWNjb3VudCAhPSBnbG9iYWxzLnplcm9BZGRyZXNzLCAnQ2Fubm90IEJ1cm4gZnJvbSBaZXJvIEFkZHJlc3MnKQoJZnJhbWVfZGlnIC0xIC8vIGFjY291bnQ6IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBDYW5ub3QgQnVybiBmcm9tIFplcm8gQWRkcmVzcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE1OQoJLy8gYXNzZXJ0KHRoaXMudXNlckV4aXN0cyhhY2NvdW50KSwgJ05vIEJhbGFuY2UgQXZhaWxhYmxlIFRvIEJ1cm4gRnJvbSBBY2NvdW50JykKCWZyYW1lX2RpZyAtMSAvLyBhY2NvdW50OiBBZGRyZXNzCgljYWxsc3ViIHVzZXJFeGlzdHMKCgkvLyBObyBCYWxhbmNlIEF2YWlsYWJsZSBUbyBCdXJuIEZyb20gQWNjb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE2MAoJLy8gYXNzZXJ0KHRoaXMuZW5zdXJlQmFsYW5jZShhY2NvdW50LCB2YWx1ZSksICdJbnN1ZmZpY2llbnQgQmFsYW5jZSBUbyBCdXJuIEZyb20gQWNjb3VudCcpCglmcmFtZV9kaWcgLTIgLy8gdmFsdWU6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMSAvLyBhY2NvdW50OiBBZGRyZXNzCgljYWxsc3ViIGVuc3VyZUJhbGFuY2UKCgkvLyBJbnN1ZmZpY2llbnQgQmFsYW5jZSBUbyBCdXJuIEZyb20gQWNjb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE2MQoJLy8gdGhpcy5fdHJhbnNmZXIoYWNjb3VudCwgZ2xvYmFscy56ZXJvQWRkcmVzcywgdmFsdWUpCglmcmFtZV9kaWcgLTIgLy8gdmFsdWU6IHVpbnQyNTYKCWdsb2JhbCBaZXJvQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIGFjY291bnQ6IEFkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE2MgoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyB1c2VyRXhpc3RzKHVzZXI6IEFkZHJlc3MpOiBib29sZWFuCnVzZXJFeGlzdHM6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTY2CgkvLyByZXR1cm4gdGhpcy51c2Vycyh1c2VyKS5leGlzdHM7CglmcmFtZV9kaWcgLTEgLy8gdXNlcjogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglyZXRzdWIKCi8vIGVuc3VyZUJhbGFuY2UodXNlcjogQWRkcmVzcywgYmFsYW5jZTogdWludDI1Nik6IGJvb2xlYW4KZW5zdXJlQmFsYW5jZToKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxNzAKCS8vIHJldHVybiB0aGlzLnVzZXJzKHVzZXIpLnZhbHVlLmJhbGFuY2UgPj0gYmFsYW5jZTsKCWZyYW1lX2RpZyAtMSAvLyB1c2VyOiBBZGRyZXNzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnVzZXJzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMiAvLyBiYWxhbmNlOiB1aW50MjU2CgliPj0KCXJldHN1YgoKLy8gY3JlYXRlTmV3VXNlcih1c2VyOiBBZGRyZXNzLCBiYWxhbmNlOiB1aW50MjU2KTogdm9pZApjcmVhdGVOZXdVc2VyOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE3NAoJLy8gdGhpcy51c2Vycyh1c2VyKS52YWx1ZSA9IHsgYmFsYW5jZTogYmFsYW5jZSwgYWxsb3dhbmNlczogW10gfQoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWR1cAoJYm94X2RlbAoJcG9wCglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDIyIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBiYWxhbmNlOiB1aW50MjU2CgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50CglieXRlIDB4MDAwMAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJYm94X3B1dAoJcmV0c3ViCgovLyBfdHJhbnNmZXIoZnJvbTogQWRkcmVzcywgdG86IEFkZHJlc3MsIHZhbHVlOiB1aW50MjU2KTogdm9pZApfdHJhbnNmZXI6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTc4CgkvLyBhc3NlcnQoIShmcm9tID09IGdsb2JhbHMuemVyb0FkZHJlc3MgJiYgdG8gPT0gZ2xvYmFscy56ZXJvQWRkcmVzcyksICdCb3RoIEFkZHJlc3MgU2hvdWxkIG5vdCBiZSB6ZXJvJykKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglkdXAKCWJ6ICpza2lwX2FuZDAKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJJiYKCipza2lwX2FuZDA6CgkhCgoJLy8gQm90aCBBZGRyZXNzIFNob3VsZCBub3QgYmUgemVybwoJYXNzZXJ0CgoJLy8gKmlmM19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxNzkKCS8vIGZyb20gPT0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWJ6ICppZjNfZWxzZWlmMV9jb25kaXRpb24KCgkvLyAqaWYzX2NvbnNlcXVlbnQKCS8vICppZjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTgwCgkvLyB0aGlzLnVzZXJzKHRvKS5leGlzdHMKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglieiAqaWY0X2Vsc2UKCgkvLyAqaWY0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxODEKCS8vIHRoaXMudXNlcnModG8pLnZhbHVlLmJhbGFuY2UgPSB0aGlzLnVzZXJzKHRvKS52YWx1ZS5iYWxhbmNlICsgdmFsdWUKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2Vycyh0bykudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAwCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMudXNlcnModG8pLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYisKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoKCS8vIHRoaXMudXNlcnModG8pLnZhbHVlLmJhbGFuY2UgKyB2YWx1ZSBvdmVyZmxvd2VkIDI1NiBiaXRzCglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglyZXBsYWNlMwoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJYm94X3B1dAoJYiAqaWY0X2VuZAoKKmlmNF9lbHNlOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE4MwoJLy8gdGhpcy5jcmVhdGVOZXdVc2VyKHRvLCB2YWx1ZSkKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCgljYWxsc3ViIGNyZWF0ZU5ld1VzZXIKCippZjRfZW5kOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE4NQoJLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IHRoaXMudG90YWxTdXBwbHkudmFsdWUgKyB2YWx1ZQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2CgliKwoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9CgoJLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSArIHZhbHVlIG92ZXJmbG93ZWQgMjU2IGJpdHMKCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWFwcF9nbG9iYWxfcHV0CgliICppZjNfZW5kCgoqaWYzX2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE4NgoJLy8gdG8gPT0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglieiAqaWYzX2Vsc2UKCgkvLyAqaWYzX2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE4NwoJLy8gdGhpcy51c2VycyhnbG9iYWxzLnplcm9BZGRyZXNzKS52YWx1ZS5iYWxhbmNlID0gdGhpcy51c2VycyhnbG9iYWxzLnplcm9BZGRyZXNzKS52YWx1ZS5iYWxhbmNlICsgdmFsdWUKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2VycyhnbG9iYWxzLnplcm9BZGRyZXNzKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2VycyhnbG9iYWxzLnplcm9BZGRyZXNzKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDMyCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWIrCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCgkvLyB0aGlzLnVzZXJzKGdsb2JhbHMuemVyb0FkZHJlc3MpLnZhbHVlLmJhbGFuY2UgKyB2YWx1ZSBvdmVyZmxvd2VkIDI1NiBiaXRzCglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglyZXBsYWNlMwoJZ2xvYmFsIFplcm9BZGRyZXNzCglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJYm94X3B1dAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxODgKCS8vIHRoaXMudXNlcnMoZnJvbSkudmFsdWUuYmFsYW5jZSA9IHRoaXMudXNlcnMoZnJvbSkudmFsdWUuYmFsYW5jZSAtIHZhbHVlCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2Vycyhmcm9tKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnVzZXJzKGZyb20pLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYi0KCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoKCS8vIHRoaXMudXNlcnMoZnJvbSkudmFsdWUuYmFsYW5jZSAtIHZhbHVlIG92ZXJmbG93ZWQgMjU2IGJpdHMKCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCXJlcGxhY2UzCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJZHVwCglib3hfZGVsCglwb3AKCXN3YXAKCWJveF9wdXQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTg5CgkvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gdGhpcy50b3RhbFN1cHBseS52YWx1ZSAtIHZhbHVlCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzU3MDcwNmM3OSAvLyAidG90YWxTdXBwbHkiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCgkvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlIC0gdmFsdWUgb3ZlcmZsb3dlZCAyNTYgYml0cwoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmM19lbmQKCippZjNfZWxzZToKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTkxCgkvLyB0aGlzLnVzZXJzKHRvKS5leGlzdHMKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglieiAqaWY1X2Vsc2UKCgkvLyAqaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoxOTIKCS8vIHRoaXMudXNlcnModG8pLnZhbHVlLmJhbGFuY2UgPSB0aGlzLnVzZXJzKHRvKS52YWx1ZS5iYWxhbmNlICsgdmFsdWUKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2Vycyh0bykudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAwCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMudXNlcnModG8pLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYisKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoKCS8vIHRoaXMudXNlcnModG8pLnZhbHVlLmJhbGFuY2UgKyB2YWx1ZSBvdmVyZmxvd2VkIDI1NiBiaXRzCglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglyZXBsYWNlMwoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJYm94X3B1dAoJYiAqaWY1X2VuZAoKKmlmNV9lbHNlOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE5NAoJLy8gdGhpcy5jcmVhdGVOZXdVc2VyKHRvLCB2YWx1ZSkKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCgljYWxsc3ViIGNyZWF0ZU5ld1VzZXIKCippZjVfZW5kOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjE5NgoJLy8gdGhpcy51c2Vycyhmcm9tKS52YWx1ZS5iYWxhbmNlID0gdGhpcy51c2Vycyhmcm9tKS52YWx1ZS5iYWxhbmNlIC0gdmFsdWUKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnVzZXJzKGZyb20pLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMAoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMudXNlcnMoZnJvbSkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2CgliLQoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9CgoJLy8gdGhpcy51c2Vycyhmcm9tKS52YWx1ZS5iYWxhbmNlIC0gdmFsdWUgb3ZlcmZsb3dlZCAyNTYgYml0cwoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJcmVwbGFjZTMKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJYm94X3B1dAoKKmlmM19lbmQ6CgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MTk5CgkvLyB0aGlzLmFyYzIwMF9UcmFuc2Zlci5sb2coeyBmcm9tOiBmcm9tLCB0bzogdG8sIHZhbHVlOiB2YWx1ZSB9KQoJYnl0ZSAweDc5ODNjMzVjIC8vIGFyYzIwMF9UcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NikKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2Cgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGNoZWNrQWxsb3dhbmNlQXZhaWxhYmxlKHVzZXI6IEFkZHJlc3MsIHNwZW5kZXI6IEFkZHJlc3MpOiBbYm9vbGVhbiwgdWludDY0XQpjaGVja0FsbG93YW5jZUF2YWlsYWJsZToKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjAzCgkvLyBhbGxvd2FuY2VzID0gdGhpcy51c2Vycyh1c2VyKS52YWx1ZS5hbGxvd2FuY2VzCglmcmFtZV9kaWcgLTEgLy8gdXNlcjogQWRkcmVzcwoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9hbGxvd2FuY2VzCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjIwNAoJLy8gYWxsb3dhbmNlc0xlbmd0aCA9ICh0aGlzLnVzZXJzKHVzZXIpLnNpemUgLSAzNikgLyA2NAoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWJveF9sZW4KCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMudXNlcnModXNlcikuc2l6ZQoJYXNzZXJ0CglpbnQgMzYKCS0KCWludCA2NAoJLwoJZnJhbWVfYnVyeSAxIC8vIGFsbG93YW5jZXNMZW5ndGg6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMDUKCS8vIGFsbG93YW5jZUZvdW5kID0gZmFsc2UKCWludCAwCglmcmFtZV9idXJ5IDIgLy8gYWxsb3dhbmNlRm91bmQ6IGJvb2wKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjA2CgkvLyBhbGxvd2FuY2VJbmRleCA9IDAKCWludCAwCglmcmFtZV9idXJ5IDMgLy8gYWxsb3dhbmNlSW5kZXg6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMDgKCS8vIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhbGxvd2FuY2VzTGVuZ3RoOyBpbmRleCArPSAxKQoJaW50IDAKCWZyYW1lX2J1cnkgNCAvLyBpbmRleDogdWludDY0CgoqZm9yXzA6CgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjA4CgkvLyBpbmRleCA8IGFsbG93YW5jZXNMZW5ndGgKCWZyYW1lX2RpZyA0IC8vIGluZGV4OiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIGFsbG93YW5jZXNMZW5ndGg6IHVpbnQ2NAoJPAoJYnogKmZvcl8wX2VuZAoKCS8vICppZjZfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjA5CgkvLyBhbGxvd2FuY2VzW2luZGV4XS5zcGVuZGVyID09IHNwZW5kZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9hbGxvd2FuY2VzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnVzZXJzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMzIKCWV4dHJhY3RfdWludDE2CglmcmFtZV9kaWcgNCAvLyBpbmRleDogdWludDY0CglpbnQgNjQKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglpbnQgMCAvLyBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnQgMzIKCWV4dHJhY3QzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJPT0KCWJ6ICppZjZfZW5kCgoJLy8gKmlmNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjEwCgkvLyBhbGxvd2FuY2VGb3VuZCA9IHRydWUKCWludCAxCglmcmFtZV9idXJ5IDIgLy8gYWxsb3dhbmNlRm91bmQ6IGJvb2wKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjExCgkvLyBhbGxvd2FuY2VJbmRleCA9IGluZGV4CglmcmFtZV9kaWcgNCAvLyBpbmRleDogdWludDY0CglmcmFtZV9idXJ5IDMgLy8gYWxsb3dhbmNlSW5kZXg6IHVpbnQ2NAoJYiAqZm9yXzBfZW5kCgoqaWY2X2VuZDoKCipmb3JfMF9jb250aW51ZToKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMDgKCS8vIGluZGV4ICs9IDEKCWZyYW1lX2RpZyA0IC8vIGluZGV4OiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IDQgLy8gaW5kZXg6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjE2CgkvLyByZXR1cm4gW2FsbG93YW5jZUZvdW5kLCBhbGxvd2FuY2VJbmRleF07CglieXRlIDB4MDAKCWludCAwCglmcmFtZV9kaWcgMiAvLyBhbGxvd2FuY2VGb3VuZDogYm9vbAoJc2V0Yml0CglmcmFtZV9kaWcgMyAvLyBhbGxvd2FuY2VJbmRleDogdWludDY0CglpdG9iCgljb25jYXQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA0CglyZXRzdWIKCi8vIHVwZGF0ZUFsbG93YW5jZSh1c2VyOiBBZGRyZXNzLCBiYWxhbmNlOiB1aW50MjU2LCBpbmRleDogdWludDY0KTogdm9pZAp1cGRhdGVBbGxvd2FuY2U6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMjAKCS8vIGFsbG93YW5jZXMgPSB0aGlzLnVzZXJzKHVzZXIpLnZhbHVlLmFsbG93YW5jZXMKCWZyYW1lX2RpZyAtMSAvLyB1c2VyOiBBZGRyZXNzCglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL2FsbG93YW5jZXMKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjIxCgkvLyBhbGxvd2FuY2VzW2luZGV4XS5hbW91bnQgPSBiYWxhbmNlCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vYWxsb3dhbmNlcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2Vycyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDMyCglleHRyYWN0X3VpbnQxNgoJZnJhbWVfZGlnIC0zIC8vIGluZGV4OiB1aW50NjQKCWludCA2NAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWludCAzMiAvLyBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglmcmFtZV9kaWcgLTIgLy8gYmFsYW5jZTogdWludDI1NgoJcmVwbGFjZTMKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9hbGxvd2FuY2VzCglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJYm94X3B1dAoJcmV0c3ViCgovLyBhZGRBbGxvd2FuY2UodXNlcjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcywgYmFsYW5jZTogdWludDI1Nik6IHZvaWQKYWRkQWxsb3dhbmNlOgoJcHJvdG8gMyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMjUKCS8vIGFsbG93YW5jZXMgPSB0aGlzLnVzZXJzKHVzZXIpLnZhbHVlLmFsbG93YW5jZXMKCWZyYW1lX2RpZyAtMSAvLyB1c2VyOiBBZGRyZXNzCglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL2FsbG93YW5jZXMKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjI2CgkvLyBuZXdBbGxvd2FuY2U6IEFsbG93YW5jZVtdID0gW10KCWJ5dGUgMHgKCWZyYW1lX2J1cnkgMSAvLyBuZXdBbGxvd2FuY2U6IEFsbG93YW5jZVtdCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjIyNwoJLy8gYWxsb3dhbmNlc0xlbmd0aCA9ICh0aGlzLnVzZXJzKHVzZXIpLnNpemUgLSAzNikgLyA2NAoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWJveF9sZW4KCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMudXNlcnModXNlcikuc2l6ZQoJYXNzZXJ0CglpbnQgMzYKCS0KCWludCA2NAoJLwoJZnJhbWVfYnVyeSAyIC8vIGFsbG93YW5jZXNMZW5ndGg6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMjgKCS8vIG5ld0VsZW1lbnQ6IEFsbG93YW5jZSA9IHsgc3BlbmRlcjogc3BlbmRlciwgYW1vdW50OiBiYWxhbmNlIH0KCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTMgLy8gYmFsYW5jZTogdWludDI1NgoJY29uY2F0CglmcmFtZV9idXJ5IDMgLy8gbmV3RWxlbWVudDogQWxsb3dhbmNlCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjIzMAoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxvd2FuY2VzTGVuZ3RoOyBpICs9IDEpCglpbnQgMAoJZnJhbWVfYnVyeSA0IC8vIGk6IHVpbnQ2NAoKKmZvcl8xOgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjIzMAoJLy8gaSA8IGFsbG93YW5jZXNMZW5ndGgKCWZyYW1lX2RpZyA0IC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIDIgLy8gYWxsb3dhbmNlc0xlbmd0aDogdWludDY0Cgk8CglieiAqZm9yXzFfZW5kCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjIzMQoJLy8gbmV3QWxsb3dhbmNlLnB1c2goYWxsb3dhbmNlc1tpXSkKCWZyYW1lX2RpZyAxIC8vIG5ld0FsbG93YW5jZTogQWxsb3dhbmNlW10KCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9hbGxvd2FuY2VzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnVzZXJzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMzIKCWV4dHJhY3RfdWludDE2CglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWludCA2NAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludCA2NAoJZXh0cmFjdDMKCWNvbmNhdAoJZnJhbWVfYnVyeSAxIC8vIG5ld0FsbG93YW5jZTogQWxsb3dhbmNlW10KCipmb3JfMV9jb250aW51ZToKCS8vIGNvbnRyYWN0c1xhcmMyMDAuYWxnby50czoyMzAKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSA0IC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzEKCipmb3JfMV9lbmQ6CgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjM0CgkvLyBuZXdBbGxvd2FuY2UucHVzaChuZXdFbGVtZW50KQoJZnJhbWVfZGlnIDEgLy8gbmV3QWxsb3dhbmNlOiBBbGxvd2FuY2VbXQoJZnJhbWVfZGlnIDMgLy8gbmV3RWxlbWVudDogQWxsb3dhbmNlCgljb25jYXQKCWZyYW1lX2J1cnkgMSAvLyBuZXdBbGxvd2FuY2U6IEFsbG93YW5jZVtdCgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjIzNQoJLy8gdGhpcy51c2Vycyh1c2VyKS52YWx1ZS5hbGxvd2FuY2VzID0gbmV3QWxsb3dhbmNlCglmcmFtZV9kaWcgLTEgLy8gdXNlcjogQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy51c2Vycyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDMyCglkdXAKCXN0b3JlIDI1MSAvLyBlbGVtZW50IGhlYWQgb2Zmc2V0Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAKCXN0b3JlIDI1NCAvLyBlbGVtZW50IHN0YXJ0CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCA2NCAvLyBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJc3RvcmUgMjUzIC8vIGVsZW1lbnQgbGVuZ3RoCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMAoJbG9hZCAyNTQgLy8gZWxlbWVudCBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIDEgLy8gbmV3QWxsb3dhbmNlOiBBbGxvd2FuY2VbXQoJZHVwCglsZW4KCWludCA2NAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJZHVwCglzdG9yZSAyNTIgLy8gbmV3IGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU0IC8vIGVsZW1lbnQgc3RhcnQKCWxvYWQgMjUzIC8vIGVsZW1lbnQgbGVuZ3RoCgkrIC8vIGdldCBlbmQgb2YgRWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbGVuCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWNhbGxzdWIgKmdldF9sZW5ndGhfZGlmZmVyZW5jZQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWR1cAoJYm94X2RlbAoJcG9wCglzd2FwCglib3hfcHV0CglyZXRzdWIKCi8vIGdldEFsbG93YW5jZSh1c2VyOiBBZGRyZXNzLCBpbmRleDogdWludDY0KTogQWxsb3dhbmNlCmdldEFsbG93YW5jZToKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjM5CgkvLyBhZGRyZXNzT2Zmc2V0ID0gaW5kZXggKiA2NCArIDM2CglmcmFtZV9kaWcgLTIgLy8gaW5kZXg6IHVpbnQ2NAoJaW50IDY0CgkqCglpbnQgMzYKCSsKCWZyYW1lX2J1cnkgMCAvLyBhZGRyZXNzT2Zmc2V0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcYXJjMjAwLmFsZ28udHM6MjQwCgkvLyB2YWx1ZU9mZnNldCA9IGFkZHJlc3NPZmZzZXQgKyAzMgoJZnJhbWVfZGlnIDAgLy8gYWRkcmVzc09mZnNldDogdWludDY0CglpbnQgMzIKCSsKCWZyYW1lX2J1cnkgMSAvLyB2YWx1ZU9mZnNldDogdWludDY0CgoJLy8gY29udHJhY3RzXGFyYzIwMC5hbGdvLnRzOjI0MQoJLy8gcmV0dXJuIHsKCS8vICAgICAgIHNwZW5kZXI6IGNhc3RCeXRlczxBZGRyZXNzPih0aGlzLnVzZXJzKHVzZXIpLmV4dHJhY3QoYWRkcmVzc09mZnNldCwgMzIpKSwKCS8vICAgICAgIGFtb3VudDogY2FzdEJ5dGVzPHVpbnQyNTY+KHRoaXMudXNlcnModXNlcikuZXh0cmFjdCh2YWx1ZU9mZnNldCwgMzIpKSwKCS8vICAgICB9OwoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAwIC8vIGFkZHJlc3NPZmZzZXQ6IHVpbnQ2NAoJaW50IDMyCglib3hfZXh0cmFjdAoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAxIC8vIHZhbHVlT2Zmc2V0OiB1aW50NjQKCWludCAzMgoJYm94X2V4dHJhY3QKCWNvbmNhdAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHVpbnQ4KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CgltZXRob2QgImFyYzIwMF9uYW1lKClzdHJpbmciCgltZXRob2QgImFyYzIwMF9zeW1ib2woKXN0cmluZyIKCW1ldGhvZCAiYXJjMjAwX2RlY2ltYWxzKCl1aW50OCIKCW1ldGhvZCAiYXJjMjAwX3RvdGFsU3VwcGx5KCl1aW50MjU2IgoJbWV0aG9kICJhcmMyMDBfYmFsYW5jZU9mKGFkZHJlc3MpdWludDI1NiIKCW1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyKGFkZHJlc3MsdWludDI1Nilib29sIgoJbWV0aG9kICJhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wiCgltZXRob2QgImFyYzIwMF9hcHByb3ZlKGFkZHJlc3MsdWludDI1Nilib29sIgoJbWV0aG9kICJhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2IgoJbWV0aG9kICJhcmMyMDBfbWludChhZGRyZXNzLHVpbnQyNTYpYm9vbCIKCW1ldGhvZCAiYXJjMjAwX2J1cm4oYWRkcmVzcyx1aW50MjU2KWJvb2wiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2FyYzIwMF9uYW1lICphYmlfcm91dGVfYXJjMjAwX3N5bWJvbCAqYWJpX3JvdXRlX2FyYzIwMF9kZWNpbWFscyAqYWJpX3JvdXRlX2FyYzIwMF90b3RhbFN1cHBseSAqYWJpX3JvdXRlX2FyYzIwMF9iYWxhbmNlT2YgKmFiaV9yb3V0ZV9hcmMyMDBfdHJhbnNmZXIgKmFiaV9yb3V0ZV9hcmMyMDBfdHJhbnNmZXJGcm9tICphYmlfcm91dGVfYXJjMjAwX2FwcHJvdmUgKmFiaV9yb3V0ZV9hcmMyMDBfYWxsb3dhbmNlICphYmlfcm91dGVfYXJjMjAwX21pbnQgKmFiaV9yb3V0ZV9hcmMyMDBfYnVybgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWIKCipwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJY29uY2F0CglmcmFtZV9idXJ5IC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50CglkdXAKCWxlbgoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglidG9pCgkrCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfYnVyeSAtMiAvLyBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3ViCgoqZ2V0X2xlbmd0aF9kaWZmZXJlbmNlOgoJbG9hZCAyNTIgLy8gbmV3IGVsZW1lbnQKCWxlbiAvLyBsZW5ndGggb2YgbmV3IGVsZW1lbnQKCWxvYWQgMjUzIC8vIGVsZW1lbnQgbGVuZ3RoCgk8CglibnogKnN3YXBwZWRfZGlmZmVyZW5jZQoJbG9hZCAyNTIgLy8gbmV3IGVsZW1lbnQKCWxlbiAvLyBsZW5ndGggb2YgbmV3IGVsZW1lbnQKCWxvYWQgMjUzIC8vIGVsZW1lbnQgbGVuZ3RoCglpbnQgMQoJc3RvcmUgMjQ5IC8vIHN1YnRyYWN0IGhlYWQgZGlmZmVyZW5jZQoJYiAqZ2V0X2RpZmZlcmVuY2UKCipzd2FwcGVkX2RpZmZlcmVuY2U6Cglsb2FkIDI1MyAvLyBlbGVtZW50IGxlbmd0aAoJbG9hZCAyNTIgLy8gbmV3IGVsZW1lbnQKCWxlbiAvLyBsZW5ndGggb2YgbmV3IGVsZW1lbnQKCWludCAwCglzdG9yZSAyNDkgLy8gc3VidHJhY3QgaGVhZCBkaWZmZXJlbmNlCgoqZ2V0X2RpZmZlcmVuY2U6CgktIC8vIGdldCBsZW5ndGggZGlmZmVyZW5jZQoJc3RvcmUgMjUwIC8vIGxlbmd0aCBkaWZmZXJlbmNlCglyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "arc200",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Contructor which initializes name, symbol, decimals and totalSupply of the token",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "symbol",
            "type": "string"
          },
          {
            "name": "decimals",
            "type": "uint8"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "arc200_name",
        "desc": "Returns the symbol of the token",
        "args": [],
        "returns": {
          "type": "string",
          "desc": "symbol of the token"
        }
      },
      {
        "name": "arc200_symbol",
        "desc": "Returns the decimals of the token",
        "args": [],
        "returns": {
          "type": "string",
          "desc": "decimals of the token"
        }
      },
      {
        "name": "arc200_decimals",
        "desc": "Returns the decimals of the token",
        "args": [],
        "returns": {
          "type": "uint8",
          "desc": "decimals of the token"
        }
      },
      {
        "name": "arc200_totalSupply",
        "desc": "Returns the total supply of the token",
        "args": [],
        "returns": {
          "type": "uint256",
          "desc": "total supply of the token"
        }
      },
      {
        "name": "arc200_balanceOf",
        "desc": "Returns the current balance of the owner of the token",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "current balance of the owner of the token"
        }
      },
      {
        "name": "arc200_transfer",
        "desc": "Transfers tokens",
        "args": [
          {
            "name": "to",
            "type": "address",
            "desc": "The destination of the transfer"
          },
          {
            "name": "value",
            "type": "uint256",
            "desc": "Amount of tokens to transfer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Status whether transfer is success or not"
        }
      },
      {
        "name": "arc200_transferFrom",
        "desc": "Transfers tokens from source to destination as approved spenderTransfers tokens from source to destination as approved spender",
        "args": [
          {
            "name": "from",
            "type": "address",
            "desc": "The source  of the transfer"
          },
          {
            "name": "to",
            "type": "address",
            "desc": "The destination of the transfer"
          },
          {
            "name": "value",
            "type": "uint256",
            "desc": "Amount of tokens to transfer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Status whether transfer is success or not"
        }
      },
      {
        "name": "arc200_approve",
        "args": [
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "arc200_Approval",
            "args": [
              {
                "name": "owner",
                "type": "address"
              },
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "arc200_allowance",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_mint",
        "args": [
          {
            "name": "account",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "arc200_burn",
        "args": [
          {
            "name": "account",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      }
    ],
    "events": [
      {
        "name": "arc200_Transfer",
        "args": [
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "arc200_Approval",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Arc200 smart contract.
 */
export type Arc200 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint8)void' | 'createApplication', {
      argsObj: {
        name: string
        symbol: string
        decimals: number
      }
      argsTuple: [name: string, symbol: string, decimals: number]
      /**
       * void
       */
      returns: void
    }>
    & Record<'arc200_name()string' | 'arc200_name', {
      argsObj: {
      }
      argsTuple: []
      /**
       * symbol of the token
       */
      returns: string
    }>
    & Record<'arc200_symbol()string' | 'arc200_symbol', {
      argsObj: {
      }
      argsTuple: []
      /**
       * decimals of the token
       */
      returns: string
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: {
      }
      argsTuple: []
      /**
       * decimals of the token
       */
      returns: number
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: {
      }
      argsTuple: []
      /**
       * total supply of the token
       */
      returns: bigint
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      /**
       * current balance of the owner of the token
       */
      returns: bigint
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: {
        /**
         * The destination of the transfer
         */
        to: string
        /**
         * Amount of tokens to transfer
         */
        value: bigint | number
      }
      argsTuple: [to: string, value: bigint | number]
      /**
       * Status whether transfer is success or not
       */
      returns: boolean
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: {
        /**
         * The source  of the transfer
         */
        from: string
        /**
         * The destination of the transfer
         */
        to: string
        /**
         * Amount of tokens to transfer
         */
        value: bigint | number
      }
      argsTuple: [from: string, to: string, value: bigint | number]
      /**
       * Status whether transfer is success or not
       */
      returns: boolean
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: {
        spender: string
        value: bigint | number
      }
      argsTuple: [spender: string, value: bigint | number]
      returns: boolean
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: {
        owner: string
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      returns: bigint
    }>
    & Record<'arc200_mint(address,uint256)bool' | 'arc200_mint', {
      argsObj: {
        account: string
        value: bigint | number
      }
      argsTuple: [account: string, value: bigint | number]
      returns: boolean
    }>
    & Record<'arc200_burn(address,uint256)bool' | 'arc200_burn', {
      argsObj: {
        account: string
        value: bigint | number
      }
      argsTuple: [account: string, value: bigint | number]
      returns: boolean
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'name'?: BinaryState
      'symbol'?: BinaryState
      'decimals'?: BinaryState
      'totalSupply'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type Arc200Sig = keyof Arc200['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends Arc200Sig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Arc200 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends Arc200Sig> = Arc200['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc200 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc200Sig> = Arc200['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type Arc200CreateCalls = (typeof Arc200CallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type Arc200CreateCallParams =
  | (TypedCallParams<'createApplication(string,string,uint8)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type Arc200DeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: Arc200CreateCalls) => Arc200CreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class Arc200CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the arc200 smart contract using the createApplication(string,string,uint8)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(string,string,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(string,string,uint8)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.name, args.symbol, args.decimals],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc200_name()string ABI method
   *
   * Returns the symbol of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Name(args: MethodArgs<'arc200_name()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_name()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()string ABI method
   *
   * Returns the decimals of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_symbol()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * Returns the decimals of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_decimals()uint8' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * Returns the total supply of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_totalSupply()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * Returns the current balance of the owner of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_balanceOf(address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * Transfers tokens
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transfer(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * Transfers tokens from source to destination as approved spenderTransfers tokens from source to destination as approved spender
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.from, args.to, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_approve(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.spender, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_allowance(address,address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_mint(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Mint(args: MethodArgs<'arc200_mint(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_mint(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_burn(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Burn(args: MethodArgs<'arc200_burn(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_burn(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.value],
      ...params,
    }
  }
}

/**
 * A client to make calls to the arc200 smart contract
 */
export class Arc200Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `Arc200Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Arc200['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the arc200 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: Arc200DeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(Arc200CallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the arc200 smart contract using the createApplication(string,string,uint8)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: void
       */
      async createApplication(args: MethodArgs<'createApplication(string,string,uint8)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(string,string,uint8)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(Arc200CallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the arc200 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the arc200_name()string ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: symbol of the token
   */
  public arc200Name(args: MethodArgs<'arc200_name()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Name(args, params))
  }

  /**
   * Calls the arc200_symbol()string ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: decimals of the token
   */
  public arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Symbol(args, params))
  }

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: decimals of the token
   */
  public arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Decimals(args, params))
  }

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: total supply of the token
   */
  public arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200TotalSupply(args, params))
  }

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: current balance of the owner of the token
   */
  public arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200BalanceOf(args, params))
  }

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * Transfers tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Status whether transfer is success or not
   */
  public arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Transfer(args, params))
  }

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spenderTransfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Status whether transfer is success or not
   */
  public arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200TransferFrom(args, params))
  }

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Approve(args, params))
  }

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Allowance(args, params))
  }

  /**
   * Calls the arc200_mint(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Mint(args: MethodArgs<'arc200_mint(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Mint(args, params))
  }

  /**
   * Calls the arc200_burn(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Burn(args: MethodArgs<'arc200_burn(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200CallFactory.arc200Burn(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Arc200['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get name() {
        return Arc200Client.getBinaryState(state, 'name')
      },
      get symbol() {
        return Arc200Client.getBinaryState(state, 'symbol')
      },
      get decimals() {
        return Arc200Client.getBinaryState(state, 'decimals')
      },
      get totalSupply() {
        return Arc200Client.getBinaryState(state, 'totalSupply')
      },
    }
  }

  public compose(): Arc200Composer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      arc200Name(args: MethodArgs<'arc200_name()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Name(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Symbol(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Decimals(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Allowance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Mint(args: MethodArgs<'arc200_mint(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Burn(args: MethodArgs<'arc200_burn(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Burn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as Arc200Composer
  }
}
export type Arc200Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc200_name()string ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(args: MethodArgs<'arc200_name()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_name()string'>]>

  /**
   * Calls the arc200_symbol()string ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_symbol()string'>]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_decimals()uint8'>]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_totalSupply()uint256'>]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_balanceOf(address)uint256'>]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * Transfers tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_transfer(address,uint256)bool'>]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spenderTransfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_transferFrom(address,address,uint256)bool'>]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_approve(address,uint256)bool'>]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_allowance(address,address)uint256'>]>

  /**
   * Calls the arc200_mint(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Mint(args: MethodArgs<'arc200_mint(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_mint(address,uint256)bool'>]>

  /**
   * Calls the arc200_burn(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Burn(args: MethodArgs<'arc200_burn(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_burn(address,uint256)bool'>]>

  /**
   * Makes a clear_state call to an existing instance of the arc200 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): Arc200Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<Arc200ComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<Arc200ComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type Arc200ComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type Arc200ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
